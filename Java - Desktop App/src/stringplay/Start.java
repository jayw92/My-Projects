

package stringplay;
import java.awt.Color;
import javax.swing.event.DocumentEvent;
import org.jdesktop.application.Action;
import org.jdesktop.application.TaskMonitor;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.Task;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.EventObject;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.event.DocumentListener;
import org.jdesktop.application.Application;
import javax.swing.filechooser.FileFilter;
import java.io.*;
import javax.swing.text.Highlighter.*;



public class Start extends javax.swing.JFrame {
    private File file = new File("untitled.spf");
    private File setting = new File("C:\\String Play Settings.ini");
    private String settings="";
    private boolean modified = false;
    static SingleFrameApplication app;
    private int canSave=0;
    private String save="";
    private Decrypted dec=new Decrypted();
    /** Creates new form Start */
    public Start(SingleFrameApplication in) {
        app=in;
        initComponents();
        int messageTimeout = 3000;
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                jLabel1.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = 50;
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = new javax.swing.ImageIcon(getClass().getResource("/stringplay/resources/busyicons/busy-icon"+i+".png"));
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                jLabel2.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon=new javax.swing.ImageIcon(getClass().getResource("/stringplay/resources/busyicons/idle-icon.png"));
        jLabel2.setIcon(idleIcon);
        jProgressBar1.setVisible(false);

        // connect action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(app.getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        jLabel2.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    jProgressBar1.setVisible(true);
                    jProgressBar1.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    jLabel2.setIcon(idleIcon);
                    jProgressBar1.setVisible(false);
                    jProgressBar1.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    jLabel1.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    jProgressBar1.setVisible(true);
                    jProgressBar1.setIndeterminate(false);
                    jProgressBar1.setValue(value);
                }
            }
        });
        if (setting.exists()==false){
            JFrame settingFrame=new JFrame();
            JFrame mainFrame = app.getMainFrame();
            settingFrame = new SettingsFrame(app);
            settingFrame.setLocationRelativeTo(mainFrame);
            app.show(settingFrame);
        }
        LoadSettings(setting);
        jTextArea1.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) { setModified(true); }
            public void insertUpdate(DocumentEvent e) { setModified(true); }
            public void removeUpdate(DocumentEvent e) { setModified(true); }
        });
        // ask for confirmation on exit
        app.addExitListener(new ConfirmExit());
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        skinbuttongroup = new javax.swing.ButtonGroup();
        encryptiongroup = new javax.swing.ButtonGroup();
        jFileChooser1 = new javax.swing.JFileChooser();
        jFileChooser2 = new javax.swing.JFileChooser();
        jFrame1 = new javax.swing.JFrame();
        jPanel5 = new javax.swing.JPanel();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jColorChooser1 = new javax.swing.JColorChooser();
        jFrame2 = new javax.swing.JFrame();
        jPanel6 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton19 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jFileChooser3 = new javax.swing.JFileChooser();
        jToolBar1 = new javax.swing.JToolBar();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jButton8 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jRadioButtonMenuItem8 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem7 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem9 = new javax.swing.JRadioButtonMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem2 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem3 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem4 = new javax.swing.JRadioButtonMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jRadioButtonMenuItem5 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem6 = new javax.swing.JRadioButtonMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();

        jFileChooser1.setCurrentDirectory(new java.io.File("C:\\Documents and Settings"));
        jFileChooser1.setDialogTitle("Open SPF");
        jFileChooser1.setFileFilter(new SpfFileFilter("StringPlay Files"));

        jFileChooser2.setCurrentDirectory(new java.io.File("C:\\Documents and Settings"));
        jFileChooser2.setDialogTitle("Save SPF");
        jFileChooser2.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);

        jFrame1.setTitle("Skin Customization");
        jFrame1.setResizable(false);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(stringplay.StringPlayApp.class).getContext().getActionMap(Start.class, this);
        jButton12.setAction(actionMap.get("ChooseDone")); // NOI18N

        jButton13.setAction(actionMap.get("ChooseCancel")); // NOI18N

        jButton11.setAction(actionMap.get("FGChoose")); // NOI18N

        jButton10.setAction(actionMap.get("BGChoose")); // NOI18N

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 230, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 19, Short.MAX_VALUE)
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 230, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 19, Short.MAX_VALUE)
        );

        jLabel3.setText("Background Color:");

        jLabel4.setText("Foreground Color:");

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(jColorChooser1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jPanel5Layout.createSequentialGroup()
                            .add(jLabel3)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(18, 18, 18)
                            .add(jButton10, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(jLabel4)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(jButton11, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel5Layout.createSequentialGroup()
                        .add(jButton12)
                        .add(6, 6, 6)
                        .add(jButton13)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jColorChooser1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel3)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jButton10))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel4)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jButton11))
                .add(23, 23, 23)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton12)
                    .add(jButton13))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout jFrame1Layout = new org.jdesktop.layout.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        jFrame2.setTitle("Find/Replace");
        jFrame2.setResizable(false);

        jLabel5.setText("Find What:");

        jButton9.setAction(actionMap.get("Find_Next")); // NOI18N

        jButton14.setAction(actionMap.get("Find_Previous")); // NOI18N

        jButton16.setAction(actionMap.get("Find_Close")); // NOI18N

        jTextField1.setFont(new java.awt.Font("Monospaced", 1, 14));

        jCheckBox1.setText("Match Case");

        jLabel6.setText("Replace With:");

        jTextField2.setFont(new java.awt.Font("Monospaced", 1, 14));

        jButton19.setAction(actionMap.get("Replace_All")); // NOI18N

        jButton15.setAction(actionMap.get("Replace_Next")); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel6Layout.createSequentialGroup()
                        .add(jLabel5)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jTextField1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel6Layout.createSequentialGroup()
                        .add(jLabel6)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jTextField2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE))
                    .add(jPanel6Layout.createSequentialGroup()
                        .add(jButton14)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton9)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton15)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton19)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton16))
                    .add(jCheckBox1))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel5))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(jTextField2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton14)
                    .add(jButton9)
                    .add(jButton15)
                    .add(jButton19)
                    .add(jButton16))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jCheckBox1)
                .add(74, 74, 74))
        );

        org.jdesktop.layout.GroupLayout jFrame2Layout = new org.jdesktop.layout.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 133, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        jFileChooser3.setCurrentDirectory(new java.io.File("C:\\Documents and Settings"));
        jFileChooser3.setDialogTitle("Encrypt Multiple Files");
        jFileChooser3.setMultiSelectionEnabled(true);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("StringPlay");
        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(600, 600));

        jToolBar1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jToolBar1.setRollover(true);

        jButton4.setAction(actionMap.get("open")); // NOI18N
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton4);

        jButton5.setAction(actionMap.get("save")); // NOI18N
        jButton5.setFocusable(false);
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton5);

        jButton6.setAction(actionMap.get("saveAs")); // NOI18N
        jButton6.setFocusable(false);
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton6);

        jButton7.setAction(actionMap.get("clearAll")); // NOI18N
        jButton7.setFocusable(false);
        jButton7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton7.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton7);
        jToolBar1.add(jSeparator1);

        jButton8.setAction(actionMap.get("Module")); // NOI18N
        jButton8.setFocusable(false);
        jButton8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton8.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton8);

        jButton1.setAction(actionMap.get("Uppercase")); // NOI18N
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton1);

        jButton2.setAction(actionMap.get("Lowercase")); // NOI18N
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton2);

        jButton3.setAction(actionMap.get("Find_Tool")); // NOI18N
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton3);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setLabelFor(jTextArea1);
        jLabel1.setText("Character");

        jProgressBar1.setOpaque(true);
        jProgressBar1.setStringPainted(true);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 317, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jProgressBar1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jProgressBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(25, 25, 25))))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setOpaque(false);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "RegularView", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 0))); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 1, 14));
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextArea1KeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea1);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "AdvancedView", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 0))); // NOI18N

        jTextArea2.setColumns(20);
        jTextArea2.setEditable(false);
        jTextArea2.setFont(new java.awt.Font("Monospaced", 1, 14));
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(5);
        jTextArea2.setWrapStyleWord(true);
        jScrollPane2.setViewportView(jTextArea2);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
        );

        jMenu1.setText("File");

        jMenuItem1.setAction(actionMap.get("open")); // NOI18N
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAction(actionMap.get("saveAs")); // NOI18N
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAction(actionMap.get("save")); // NOI18N
        jMenu1.add(jMenuItem3);
        jMenu1.add(jSeparator3);

        jMenuItem4.setAction(actionMap.get("clearAll")); // NOI18N
        jMenu1.add(jMenuItem4);

        jMenuItem5.setAction(actionMap.get("quit")); // NOI18N
        jMenu1.add(jMenuItem5);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem8.setAction(actionMap.get("Module")); // NOI18N
        jMenu2.add(jMenuItem8);
        jMenu2.add(jSeparator2);

        jMenuItem9.setAction(actionMap.get("Uppercase")); // NOI18N
        jMenu2.add(jMenuItem9);

        jMenuItem10.setAction(actionMap.get("Lowercase")); // NOI18N
        jMenu2.add(jMenuItem10);
        jMenu2.add(jSeparator5);

        jMenuItem11.setAction(actionMap.get("Find_Tool")); // NOI18N
        jMenu2.add(jMenuItem11);

        jMenuBar1.add(jMenu2);

        jMenu5.setText("Encryption");

        encryptiongroup.add(jRadioButtonMenuItem8);
        jRadioButtonMenuItem8.setMnemonic('1');
        jRadioButtonMenuItem8.setSelected(true);
        jRadioButtonMenuItem8.setText("Numeric");
        jMenu5.add(jRadioButtonMenuItem8);

        encryptiongroup.add(jRadioButtonMenuItem7);
        jRadioButtonMenuItem7.setMnemonic('2');
        jRadioButtonMenuItem7.setText("Alpha");
        jMenu5.add(jRadioButtonMenuItem7);

        encryptiongroup.add(jRadioButtonMenuItem9);
        jRadioButtonMenuItem9.setMnemonic('3');
        jRadioButtonMenuItem9.setText("AlphaNumeric");
        jMenu5.add(jRadioButtonMenuItem9);
        jMenu5.add(jSeparator6);

        jMenuItem12.setAction(actionMap.get("EncryptGroup")); // NOI18N
        jMenu5.add(jMenuItem12);

        jMenuBar1.add(jMenu5);

        jMenu3.setText("Skins");

        jRadioButtonMenuItem1.setAction(actionMap.get("SkinRed")); // NOI18N
        skinbuttongroup.add(jRadioButtonMenuItem1);
        jMenu3.add(jRadioButtonMenuItem1);

        jRadioButtonMenuItem2.setAction(actionMap.get("SkinNight")); // NOI18N
        skinbuttongroup.add(jRadioButtonMenuItem2);
        jMenu3.add(jRadioButtonMenuItem2);

        jRadioButtonMenuItem3.setAction(actionMap.get("SkinBlue")); // NOI18N
        skinbuttongroup.add(jRadioButtonMenuItem3);
        jMenu3.add(jRadioButtonMenuItem3);

        jRadioButtonMenuItem4.setAction(actionMap.get("SkinDark")); // NOI18N
        skinbuttongroup.add(jRadioButtonMenuItem4);
        jMenu3.add(jRadioButtonMenuItem4);
        jMenu3.add(jSeparator4);

        jRadioButtonMenuItem5.setAction(actionMap.get("SkinDefault")); // NOI18N
        skinbuttongroup.add(jRadioButtonMenuItem5);
        jRadioButtonMenuItem5.setSelected(true);
        jMenu3.add(jRadioButtonMenuItem5);

        jRadioButtonMenuItem6.setAction(actionMap.get("SkinCus")); // NOI18N
        skinbuttongroup.add(jRadioButtonMenuItem6);
        jMenu3.add(jRadioButtonMenuItem6);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Help");

        jMenuItem6.setText("How-to-use");
        jMenu4.add(jMenuItem6);

        jMenuItem7.setAction(actionMap.get("showAboutBox")); // NOI18N
        jMenu4.add(jMenuItem7);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jToolBar1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 707, Short.MAX_VALUE)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jToolBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 47, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextArea1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea1KeyTyped
    updateCount();
    }//GEN-LAST:event_jTextArea1KeyTyped

        public void updateCount(){
        int count=jTextArea1.getText().length();
        int lines=jTextArea1.getLineCount();
        String[] word=jTextArea1.getText().split(" ");
        int words=word.length+lines-1;
        jLabel1.setText("Characters: "+count+" Lines: "+lines+" Words: "+words);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Start(app).setVisible(true);
            }
        });
    }

    public File getFile() {
        return file;
    }

    /* Set the bound file property and update the GUI.
     */
    private void setFile(File file) {
        File oldValue = this.file;
        this.file = file;
        firePropertyChange("file", oldValue, this.file);
    }

    public boolean isModified() {
        return modified;
    }

    private void setModified(boolean modified) {
        boolean oldValue = this.modified;
        this.modified = modified;
        firePropertyChange("modified", oldValue, this.modified);
    }

    @Action
    public Task open() {
        jFileChooser1.showOpenDialog(app.getMainFrame());
        jFileChooser1.setVisible(true);
        Task task = null;
        if (jFileChooser1.APPROVE_OPTION==0){
            task = new LoadFileTask(jFileChooser1.getSelectedFile());
        }
        return task;
    }

    private class OpenTask extends org.jdesktop.application.Task<Object, Void> {
        OpenTask(org.jdesktop.application.Application app) {
            super(app);
        }
        @Override protected Object doInBackground() {
            return null;  // return your result
        }
        @Override protected void succeeded(Object result) {
        }
    }

    public void LoadSettings(File file){
        try{
    // Open the file that is the first
    // command line parameter
    FileInputStream fstream = new FileInputStream(file);
    // Get the object of DataInputStream
    DataInputStream get = new DataInputStream(fstream);
        BufferedReader br = new BufferedReader(new InputStreamReader(get));
    String strLine;
    //Read File Line By Line
    int bgr=0;
    int bgg=0;
    int bgb=0;
    int fgr=0;
    int fgg=0;
    int fgb=0;
    while ((strLine = br.readLine()) != null){
        if (strLine.startsWith("SkinBGR"))
                    bgr=Integer.parseInt(strLine.substring(strLine.indexOf("=")+1));
        if (strLine.startsWith("SkinFGR"))
                    fgr=Integer.parseInt(strLine.substring(strLine.indexOf("=")+1));
        if (strLine.startsWith("SkinBGG"))
                    bgg=Integer.parseInt(strLine.substring(strLine.indexOf("=")+1));
        if (strLine.startsWith("SkinFGG"))
                    fgg=Integer.parseInt(strLine.substring(strLine.indexOf("=")+1));
        if (strLine.startsWith("SkinBGB"))
                    bgb=Integer.parseInt(strLine.substring(strLine.indexOf("=")+1));
        if (strLine.startsWith("SkinFGB"))
                    fgb=Integer.parseInt(strLine.substring(strLine.indexOf("=")+1));
        if (strLine.startsWith("AppEncrypt")){
            int t=Integer.parseInt(strLine.substring(strLine.indexOf("=")+1));
            if (t==1)
            jRadioButtonMenuItem8.setSelected(true);
            if (t==2)
            jRadioButtonMenuItem7.setSelected(true);
            if (t==3)
            jRadioButtonMenuItem9.setSelected(true);
        }
        if (strLine.startsWith("Skin#")){
                    int v=Integer.parseInt(strLine.substring(strLine.indexOf("=")+1));
            if (v==1)
            jRadioButtonMenuItem1.setSelected(true);
            if (v==2)
            jRadioButtonMenuItem2.setSelected(true);
            if (v==3)
            jRadioButtonMenuItem3.setSelected(true);
            if (v==4)
            jRadioButtonMenuItem4.setSelected(true);
            if (v==5)
            jRadioButtonMenuItem5.setSelected(true);
            if (v==6)
            jRadioButtonMenuItem6.setSelected(true);
        }
                if (strLine.startsWith("AppLastPath")){
                    String n=strLine.substring(strLine.indexOf("=")+1);
                    File last=new File(n);
                    jFileChooser1.setCurrentDirectory(last);
                    jFileChooser2.setCurrentDirectory(last);
                    jFileChooser3.setCurrentDirectory(last);
                }
      // Print the content on the console
      settings=settings+strLine+"\n";
      System.out.println (strLine);
    }
    color(new Color(bgr,bgg,bgb),new Color(fgr,fgg,fgb));
    //Close the input stream
    get.close();
    }catch (Exception e){//Catch exception if any
      System.err.println("Error: " + e.getMessage());
    }
    }
    private class LoadFileTask extends StringPlayApp.LoadFileTask {

        LoadFileTask(File file) {
            super(app, file);
        }

        @Override protected void succeeded(String fileContents) {
            setFile(getFile());
            save=fileContents;
            jTextArea2.setText(fileContents);
            DecryptFile();
            updateSettings();
            setModified(false);
        }

        @Override protected void failed(Throwable e) {
            String msg = "File Loading error has occured.";
            String title = "Loading Error";
            int type = JOptionPane.ERROR_MESSAGE;
            JOptionPane.showMessageDialog(app.getMainFrame(), msg, title, type);
        }
    }


    @Action(enabledProperty = "modified")
    public Task save() {
        if (canSave==1){
            EncryptFile();
        return new SaveFileTask(getFile());
        }
        else
            return saveAs();
    }

    private class SaveTask extends org.jdesktop.application.Task<Object, Void> {
        SaveTask(org.jdesktop.application.Application app) {
            super(app);
        }
        @Override protected Object doInBackground() {
            return null;  // return your result
        }
        @Override protected void succeeded(Object result) {
        }
    }

    @Action
    public Task saveAs() {
        canSave=1;
        EncryptFile();
        jFileChooser2.showSaveDialog(app.getMainFrame());
        jFileChooser2.setVisible(true);
        Task task = null;
        if (jFileChooser2.APPROVE_OPTION==0){
            task = new SaveFileTask(jFileChooser2.getSelectedFile());
        }
        return task;
    }

    private class SaveAsTask extends org.jdesktop.application.Task<Object, Void> {
        SaveAsTask(org.jdesktop.application.Application app) {
            super(app);
        }
        @Override protected Object doInBackground() {
            return null;  // return your result
        }
        @Override protected void succeeded(Object result) {
        }
    }


    private class SaveFileTask extends StringPlayApp.SaveFileTask {
        SaveFileTask(File file) {
            super(app, file,save);
        }

        @Override protected void succeeded(Void ignored) {
	    setFile(getFile());
            jFileChooser1.setCurrentDirectory(jFileChooser2.getCurrentDirectory());
            updateSettings();
            setModified(false);
        }

        @Override protected void failed(Throwable e) {
            String msg = "File Saving error has occured.";
            String title = "Saving Error";
            int type = JOptionPane.ERROR_MESSAGE;
            JOptionPane.showMessageDialog(app.getMainFrame(), msg, title, type);
        }
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = app.getMainFrame();
            aboutBox = new StringPlayAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        app.show(aboutBox);
    }

    private JFileChooser createFileChooser(String name) {
        JFileChooser fc = new JFileChooser();
        fc.setDialogTitle(name);
        String textFilesDesc = "StringPlay Files";
        fc.setFileFilter(new SpfFileFilter("StringPlay Files"));
        return fc;
    }


    private static class SpfFileFilter extends FileFilter {

        private final String description;

        SpfFileFilter(String description) {
            this.description = description;
        }

        @Override
        public boolean accept(File f) {
            if (f.isDirectory()) {
                return true;
            }
            String fileName = f.getName();
            int i = fileName.lastIndexOf('.');
            if ((i > 0) && (i < (fileName.length() - 1))) {
                String fileExt = fileName.substring(i + 1);
                if ("spf".equalsIgnoreCase(fileExt)) {
                    return true;
                }
            }
            return false;
        }

        @Override
        public String getDescription() {
            return description;
        }
    }

    private class ConfirmExit implements Application.ExitListener {
        public boolean canExit(EventObject e) {
            if (isModified()) {
                String confirmExitText = "The text in the file has changed.  Do you really want to exit?";
                int option = JOptionPane.showConfirmDialog(app.getMainFrame(), confirmExitText);
                return option == JOptionPane.YES_OPTION;
                // TODO: also offer saving
            } else {
                return true;
            }
        }
        public void willExit(EventObject e) { }
    }

    @Action
    public void clearAll() {
        file=new File("untitled.spf");
        jTextArea1.setText("");
        jTextArea2.setText("");
        save="";
        setModified(false);
        canSave=0;
    }

    @Action
    public void EncryptFile() {
        jTextArea2.setText("");
        Encrypted secret=new Encrypted(jTextArea1.getText(),1);
        String transfer="";
        if (jRadioButtonMenuItem8.isSelected())
            secret=new Encrypted(jTextArea1.getText(),1);
        if (jRadioButtonMenuItem7.isSelected())
            secret=new Encrypted(jTextArea1.getText(),2);
        if (jRadioButtonMenuItem9.isSelected())
            secret=new Encrypted(jTextArea1.getText(),3);
        transfer=secret.getEncrypted();
        jTextArea2.setText(transfer);
        save=transfer;
    }

    @Action
    public void DecryptFile() {
        dec=new Decrypted(save);
        jTextArea1.setText(dec.getDecrypted());
        updateCount();
        int type=dec.getDecryptedType();
        if (type==1)
            jRadioButtonMenuItem8.setSelected(true);
        if (type==2)
            jRadioButtonMenuItem7.setSelected(true);
        if (type==3)
            jRadioButtonMenuItem9.setSelected(true);
    }

    @Action
    public void SkinDefault() {
        skin(0);
    }

    public void updateSettings(){
        settings="SkinBGR="+jButton4.getBackground().getRed()+
                "\nSkinBGG="+jButton4.getBackground().getGreen()+
                "\nSkinBGB="+jButton4.getBackground().getBlue()+
                "\nSkinFGR="+jButton4.getForeground().getRed()+
                "\nSkinFGG="+jButton4.getForeground().getGreen()+
                "\nSkinFGB="+jButton4.getForeground().getBlue()+
                "\nAppLastPath="+jFileChooser1.getCurrentDirectory().getAbsolutePath();
        if (jRadioButtonMenuItem8.isSelected())
            settings=settings+"\nAppEncrypt=1";
        if (jRadioButtonMenuItem7.isSelected())
            settings=settings+"\nAppEncrypt=2";
        if (jRadioButtonMenuItem9.isSelected())
            settings=settings+"\nAppEncrypt=3";
        if (jRadioButtonMenuItem1.isSelected())
            settings=settings+"\nSkin#=1";
        if (jRadioButtonMenuItem2.isSelected())
            settings=settings+"\nSkin#=2";
        if (jRadioButtonMenuItem3.isSelected())
            settings=settings+"\nSkin#=3";
        if (jRadioButtonMenuItem4.isSelected())
            settings=settings+"\nSkin#=4";
        if (jRadioButtonMenuItem5.isSelected())
            settings=settings+"\nSkin#=5";
        if (jRadioButtonMenuItem6.isSelected())
            settings=settings+"\nSkin#=6";
        try { BufferedWriter out = new BufferedWriter(new FileWriter(setting));
        out.write(settings);
        out.close(); }catch (IOException e) { }
    }

    public void color(Color buttonbgcolor, Color buttonfgcolor){

        //Buttons, Labels, MenuItems
        jButton1.setBackground(buttonbgcolor);
        jButton1.setForeground(buttonfgcolor);
        jButton2.setBackground(buttonbgcolor);
        jButton2.setForeground(buttonfgcolor);
        jButton3.setBackground(buttonbgcolor);
        jButton3.setForeground(buttonfgcolor);
        jButton4.setBackground(buttonbgcolor);
        jButton4.setForeground(buttonfgcolor);
        jButton5.setBackground(buttonbgcolor);
        jButton5.setForeground(buttonfgcolor);
        jButton6.setBackground(buttonbgcolor);
        jButton6.setForeground(buttonfgcolor);
        jButton7.setBackground(buttonbgcolor);
        jButton7.setForeground(buttonfgcolor);
        jButton8.setBackground(buttonbgcolor);
        jButton8.setForeground(buttonfgcolor);
        jButton9.setBackground(buttonbgcolor);
        jButton9.setForeground(buttonfgcolor);
        jButton10.setBackground(buttonbgcolor);
        jButton10.setForeground(buttonfgcolor);
        jButton11.setBackground(buttonbgcolor);
        jButton11.setForeground(buttonfgcolor);
        jButton12.setBackground(buttonbgcolor);
        jButton12.setForeground(buttonfgcolor);
        jButton13.setBackground(buttonbgcolor);
        jButton13.setForeground(buttonfgcolor);
        jButton14.setBackground(buttonbgcolor);
        jButton14.setForeground(buttonfgcolor);
        jButton15.setBackground(buttonbgcolor);
        jButton15.setForeground(buttonfgcolor);
        jButton16.setBackground(buttonbgcolor);
        jButton16.setForeground(buttonfgcolor);
        jButton19.setBackground(buttonbgcolor);
        jButton19.setForeground(buttonfgcolor);
        jCheckBox1.setBackground(buttonbgcolor);
        jCheckBox1.setForeground(buttonfgcolor);
        jMenu1.setBackground(buttonbgcolor);
        jMenu2.setBackground(buttonbgcolor);
        jMenu3.setBackground(buttonbgcolor);
        jMenu4.setBackground(buttonbgcolor);
        jMenu5.setBackground(buttonbgcolor);
        jMenu1.setForeground(buttonfgcolor);
        jMenu2.setForeground(buttonfgcolor);
        jMenu3.setForeground(buttonfgcolor);
        jMenu4.setForeground(buttonfgcolor);
        jMenu5.setForeground(buttonfgcolor);
        jMenuItem1.setBackground(buttonbgcolor);
        jMenuItem1.setForeground(buttonfgcolor);
        jMenuItem2.setBackground(buttonbgcolor);
        jMenuItem2.setForeground(buttonfgcolor);
        jMenuItem3.setBackground(buttonbgcolor);
        jMenuItem3.setForeground(buttonfgcolor);
        jMenuItem4.setBackground(buttonbgcolor);
        jMenuItem4.setForeground(buttonfgcolor);
        jMenuItem5.setBackground(buttonbgcolor);
        jMenuItem5.setForeground(buttonfgcolor);
        jMenuItem6.setBackground(buttonbgcolor);
        jMenuItem6.setForeground(buttonfgcolor);
        jMenuItem7.setBackground(buttonbgcolor);
        jMenuItem7.setForeground(buttonfgcolor);
        jMenuItem8.setBackground(buttonbgcolor);
        jMenuItem8.setForeground(buttonfgcolor);
        jMenuItem9.setBackground(buttonbgcolor);
        jMenuItem9.setForeground(buttonfgcolor);
        jMenuItem10.setBackground(buttonbgcolor);
        jMenuItem10.setForeground(buttonfgcolor);
        jMenuItem11.setBackground(buttonbgcolor);
        jMenuItem11.setForeground(buttonfgcolor);
        jMenuItem12.setBackground(buttonbgcolor);
        jMenuItem12.setForeground(buttonfgcolor);
        jRadioButtonMenuItem1.setBackground(buttonbgcolor);
        jRadioButtonMenuItem1.setForeground(buttonfgcolor);
        jRadioButtonMenuItem2.setBackground(buttonbgcolor);
        jRadioButtonMenuItem2.setForeground(buttonfgcolor);
        jRadioButtonMenuItem3.setBackground(buttonbgcolor);
        jRadioButtonMenuItem3.setForeground(buttonfgcolor);
        jRadioButtonMenuItem4.setBackground(buttonbgcolor);
        jRadioButtonMenuItem4.setForeground(buttonfgcolor);
        jRadioButtonMenuItem5.setBackground(buttonbgcolor);
        jRadioButtonMenuItem5.setForeground(buttonfgcolor);
        jRadioButtonMenuItem6.setBackground(buttonbgcolor);
        jRadioButtonMenuItem6.setForeground(buttonfgcolor);
        jRadioButtonMenuItem7.setBackground(buttonbgcolor);
        jRadioButtonMenuItem7.setForeground(buttonfgcolor);
        jRadioButtonMenuItem8.setBackground(buttonbgcolor);
        jRadioButtonMenuItem8.setForeground(buttonfgcolor);
        jRadioButtonMenuItem9.setBackground(buttonbgcolor);
        jRadioButtonMenuItem9.setForeground(buttonfgcolor);
        jToolBar1.setBackground(buttonbgcolor);
        jToolBar1.setForeground(buttonfgcolor);
        jMenuBar1.setBackground(buttonbgcolor);
        jMenuBar1.setForeground(buttonfgcolor);
        jPanel1.setBackground(buttonbgcolor);
        jPanel2.setBackground(buttonbgcolor);
        jPanel5.setBackground(buttonbgcolor);
        jPanel6.setBackground(buttonbgcolor);
        jScrollPane1.setBackground(buttonbgcolor);
        jScrollPane1.setForeground(buttonfgcolor);
        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "RegularView", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), buttonfgcolor));
        jScrollPane2.setBackground(buttonbgcolor);
        jScrollPane2.setForeground(buttonfgcolor);
        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "AdvancedView", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), buttonfgcolor));
        jLabel1.setForeground(buttonfgcolor);
        jLabel2.setForeground(buttonfgcolor);
        jLabel3.setForeground(buttonfgcolor);
        jLabel4.setForeground(buttonfgcolor);
        jLabel5.setForeground(buttonfgcolor);
        jLabel6.setForeground(buttonfgcolor);
        jProgressBar1.setBackground(buttonbgcolor);
        jProgressBar1.setForeground(buttonfgcolor);
        jFrame1.setBackground(buttonbgcolor);
        jFrame1.setForeground(buttonfgcolor);
        jColorChooser1.setBackground(buttonbgcolor);
        jColorChooser1.setForeground(buttonfgcolor);

        jTextArea1.setBackground(buttonbgcolor);
        jTextArea1.setForeground(buttonfgcolor);
        jTextArea1.setSelectedTextColor(buttonbgcolor);
        jTextArea1.setSelectionColor(buttonfgcolor);
        jTextArea1.setCaretColor(buttonfgcolor);
        jTextArea2.setBackground(buttonbgcolor);
        jTextArea2.setForeground(buttonfgcolor);
        jTextArea2.setSelectedTextColor(buttonbgcolor);
        jTextArea2.setSelectionColor(buttonfgcolor);
        jTextArea2.setCaretColor(buttonfgcolor);
        jTextField1.setBackground(buttonbgcolor);
        jTextField1.setForeground(buttonfgcolor);
        jTextField1.setSelectedTextColor(buttonbgcolor);
        jTextField1.setSelectionColor(buttonfgcolor);
        jTextField1.setCaretColor(buttonfgcolor);
        jTextField2.setBackground(buttonbgcolor);
        jTextField2.setForeground(buttonfgcolor);
        jTextField2.setSelectedTextColor(buttonbgcolor);
        jTextField2.setSelectionColor(buttonfgcolor);
        jTextField2.setCaretColor(buttonfgcolor);
        updateSettings();
    }
    public void skin(int x){
        Color buttonbgcolor;
        Color buttonfgcolor;
        if (x==0){
            buttonbgcolor=new Color(255,255,255);
            buttonfgcolor=new Color(0,0,0);
            jRadioButtonMenuItem5.setSelected(true);
            color(buttonbgcolor,buttonfgcolor);
        }
        if (x==1){
            buttonbgcolor=new Color(155,0,0);
            buttonfgcolor=new Color(225,225,0);
            jRadioButtonMenuItem1.setSelected(true);
            color(buttonbgcolor,buttonfgcolor);
        }
        if (x==2){
            buttonbgcolor=new Color(0,0,60);
            buttonfgcolor=new Color(255,255,255);
            jRadioButtonMenuItem2.setSelected(true);
            color(buttonbgcolor,buttonfgcolor);
        }
        if (x==3){
            buttonbgcolor=new Color(50,150,255);
            buttonfgcolor=new Color(0,0,50);
            jRadioButtonMenuItem3.setSelected(true);
            color(buttonbgcolor,buttonfgcolor);
        }
        if (x==4){
            buttonbgcolor=new Color(0,0,0);
            buttonfgcolor=new Color(0,255,0);
            jRadioButtonMenuItem4.setSelected(true);
            color(buttonbgcolor,buttonfgcolor);
        }
        if (x==5){
            jFrame1.pack();
            jFrame1.setVisible(true);
        }
        if (x==6){
            jRadioButtonMenuItem6.setSelected(true);
            buttonbgcolor=jPanel3.getBackground();
            buttonfgcolor=jPanel4.getBackground();
            color(buttonbgcolor,buttonfgcolor);
        }
    }

    @Action
    public void SkinRed() {
        skin(1);
    }

    @Action
    public void SkinNight() {
        skin(2);
    }

    @Action
    public void SkinBlue() {
        skin(3);
    }

    @Action
    public void SkinDark() {
        skin(4);
    }

    @Action
    public void SkinCus() {
        skin(5);
    }

    @Action
    public void BGChoose() {
        jPanel3.setBackground(jColorChooser1.getColor());
    }

    @Action
    public void FGChoose() {
        jPanel4.setBackground(jColorChooser1.getColor());
    }

    @Action
    public void ChooseDone() {
        jFrame1.setVisible(false);
        skin(6);
    }

    @Action
    public void ChooseCancel() {
        jFrame1.setVisible(false);
    }

    @Action
    public void Module() {
        JFrame module=new JFrame();
        JFrame mainFrame = app.getMainFrame();
        int secret=0;
        if (jRadioButtonMenuItem8.isSelected())
            secret=1;
        if (jRadioButtonMenuItem7.isSelected())
            secret=2;
        if (jRadioButtonMenuItem9.isSelected())
            secret=3;
            module = new modulus(app, jButton10.getBackground(),jButton10.getForeground(),jTextArea1.getText(),secret);
            module.setLocationRelativeTo(mainFrame);
        app.show(module);
    }

    @Action
    public void Uppercase() {
        jTextArea1.setText(jTextArea1.getText().toUpperCase());
    }

    @Action
    public void Lowercase() {
        jTextArea1.setText(jTextArea1.getText().toLowerCase());
    }

    @Action
    public void Find_Tool() {
        jFrame2.pack();
        jFrame2.setVisible(true);
    }

    @Action
    public void Find_Next() {
        String find=jTextField1.getText();
        String text=jTextArea1.getText();
        int at=jTextArea1.getCaretPosition();
        int x=0;
        if (jCheckBox1.isSelected()){
                for (x=at;x+find.length()<text.length();x++){
                    if (text.substring(x, x+find.length()).equals(find)){
                        jTextArea1.select(x, x+find.length());
                        x=text.length();}
                }
        }
        if ((jCheckBox1.isSelected()==false)){
                for (x=at;x+find.length()<text.length();x++){
                    if (text.substring(x, x+find.length()).equalsIgnoreCase(find)){
                        jTextArea1.select(x, x+find.length());
                        x=text.length();}
                }
        }
    }

    @Action
    public void Find_Previous() {
        String find=jTextField1.getText();
        String text=jTextArea1.getText();
        int at=jTextArea1.getCaretPosition();
        int y=0;
        int x=at;
        if (jTextArea1.getSelectionEnd()==at){
            y=-1;
        }

        if (jCheckBox1.isSelected()){
                for (x=x+y;x-find.length()>0;x--){
                    if (text.substring(x-find.length(), x).equals(find)){
                        jTextArea1.select(x-find.length(), x);
                        x=find.length();}
                }
        }
        if ((jCheckBox1.isSelected()==false)){
                for (x=x+y;x-find.length()>0;x--){
                    if (text.substring(x-find.length(), x).equalsIgnoreCase(find)){
                        jTextArea1.select(x-find.length(), x);
                        x=find.length();}
                }
        }
    }

   /* @Action
    public void Find_All() {
        String find=jTextField1.getText();
        String text=jTextArea1.getText();
        int x=0;
        for(int y=0;y<text.length();y++){
            x=text.substring(y).indexOf(find)+y;
            y=x+find.length();
            jTextArea1.select(x, y);
        }
    }*/

    @Action
    public void Find_Close() {
        jFrame2.setVisible(false);
    }
    
   // @Action
    //public void Replace_Previous() {
    //}

    @Action
    public void Replace_Next() {
        jTextArea1.setText(jTextArea1.getSelectedText().replace(jTextField1.getText(),jTextField2.getText()));
    }

    @Action
    public void Replace_All() {
        jTextArea1.setText(jTextArea1.getText().replaceAll(jTextField1.getText(),jTextField2.getText()));
    }

    @Action
    public void EncryptGroup() {
        jFileChooser3.showOpenDialog(app.getMainFrame());
        jFileChooser3.setVisible(true);
        if (jFileChooser3.APPROVE_OPTION==0){
            ConvertFileTask();
        }
    }
    public void ConvertFileTask() {
        File[] selected=jFileChooser3.getSelectedFiles();
        for (int x=0;x<selected.length;x++){
    String strLine;
    String all="";
        String transfer="";
            try{
    // Open the file that is the first
    // command line parameter
    FileInputStream fstream = new FileInputStream(selected[x]);
    // Get the object of DataInputStream
    DataInputStream get = new DataInputStream(fstream);
        BufferedReader br = new BufferedReader(new InputStreamReader(get));
    //Read File Line By Line
    while ((strLine = br.readLine()) != null){
        all=all+strLine+"\n";
    }
    System.out.println(all);
        Encrypted secret=new Encrypted(all,1);
        if (jRadioButtonMenuItem8.isSelected())
            secret=new Encrypted(all,1);
        if (jRadioButtonMenuItem7.isSelected())
            secret=new Encrypted(all,2);
        if (jRadioButtonMenuItem9.isSelected())
            secret=new Encrypted(all,3);
        transfer=secret.getEncrypted();

    //Close the input stream
    get.close();
    }catch (Exception e){//Catch exception if any
      System.err.println("Error: " + e.getMessage());
    }
        try {
            File replace=new File(selected[x].getAbsolutePath()+selected[x].getName()+".spf");
            BufferedWriter out = new BufferedWriter(new FileWriter(replace));
        out.write(transfer);
        out.close(); }catch (IOException e) {System.err.println("Error: " + e.getMessage());}
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup encryptiongroup;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFileChooser jFileChooser2;
    private javax.swing.JFileChooser jFileChooser3;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem2;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem3;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem4;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem5;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem6;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem7;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem8;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.ButtonGroup skinbuttongroup;
    // End of variables declaration//GEN-END:variables
        private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;

    private static final Logger logger = Logger.getLogger(Start.class.getName());
}
